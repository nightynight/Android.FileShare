{
  "name": "Android.fileshare",
  "tagline": "",
  "body": "本文涉及的权限\r\n```\r\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n<uses-permission android:name=\"android.permission.MODE_WORLD_READABLE\" />\r\n<uses-permission android:name=\"android.permission.MODE_WORLD_WRITEABLE\" />\r\n<uses-permission android:name=\"android.permission.MOUNT_UNMOUNT_FILESYSTEMS\" />\r\n```\r\n##一.分享文件\r\n###1.分享文本内容（Send Text Content）\r\n```\r\nIntent sendIntent = new Intent();\r\nsendIntent.setAction(Intent.ACTION_SEND);\r\n//为intent设置一些标准的附加值，例如：EXTRA_EMAIL, EXTRA_CC, EXTRA_BCC, EXTRA_SUBJECT等。\r\n// 如果接收程序没有针对那些做特殊的处理，则不会有对应的反应。\r\nsendIntent.putExtra(Intent.EXTRA_TEXT, \"This is my text to send.\");\r\nsendIntent.setType(\"text/plain\");\r\nstartActivity(Intent.createChooser(sendIntent, \"send title\"));\r\n//调用了Intent.createChooser()，那么Android总是会显示可供选择。\r\n```\r\n###2.分享二进制内容(Send Binary Content)\r\n分享二进制的数据需要结合设置特定的MIME类型，需要在EXTRA_STREAM里面放置数据的URI,下面有个分享图片的例子，该例子也可以修改用于分享任何类型的二进制数据：\r\n```\r\n\r\nUri imageUri=Uri.fromFile(new File(Environment.getExternalStorageDirectory().toString()+\"/1.jpg\"));\r\nLog.i(\"test\",\"-------------+++++++++\"+imageUri.toString());\r\nIntent shareIntent = new Intent();\r\nshareIntent.setAction(Intent.ACTION_SEND);\r\nshareIntent.putExtra(Intent.EXTRA_STREAM, imageUri);\r\nshareIntent.setType(\"image/jpg\");\r\nstartActivity(Intent.createChooser(shareIntent, \"send picture\"));\r\n```\r\n此处的Uri用了一个外存中的文件，因为外存中的文件所有应用都能访问，所以没有权限的问题。如果想共享该应用程序中的文件，即内部文件，需要用到Content Provider。这里用FileProvider，这是ContentProvider的一个子类。\r\n先在manifest中加入以下代码：\r\n```\r\n<provider\r\n    android:name=\"android.support.v4.content.FileProvider\"\r\n    android:authorities=\"youPackageName.fileprovider\"\r\n    android:grantUriPermissions=\"true\"\r\n    android:exported=\"false\">\r\n    <meta-data\r\n        android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n        android:resource=\"@xml/filepaths\" />\r\n</provider>\r\n```\r\n然后在res中加入xml/filepaths.xml（该文件名与manifest文件中对应）\r\n```\r\n<paths>\r\n    <files-path path=\"images/\" name=\"myimages\" />\r\n    <!--<files-path>标签共享的是在我们应用的内部存储中“files/”目录下的目录-->\r\n</paths>\r\n```\r\n然后Uri可以这样构建：\r\n\r\n```\r\nFile imagePath = new File(getFilesDir(), \"images\");\r\nFile newFile = new File(getFilesDir(), \"images/1.jpg\");\r\nUri imageUri = getUriForFile(this,\"youPackageName.fileprovider\",newFile);\r\n```\r\n这样就把/data/data/youPacksgeName/files/image/1.jpg解析为：\r\ncontent://youPackageName.fileprovider/myimages/1.jpg，这样其他应用程序就不会知道该文件的具体地址，又可以使用该文件，而且使用完后权限被自动收回，保证了文件的安全性。\r\n###3.发送多块内容(Send Multiple Pieces of Content)\r\n```\r\nArrayList<Uri> imageUris = new ArrayList<Uri>();\r\nimageUris.add(imageUri1); // Add your image URIs hereimageUris.add(imageUri2);\r\n\r\nIntent shareIntent = new Intent();\r\nshareIntent.setAction(Intent.ACTION_SEND_MULTIPLE);\r\nshareIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, imageUris);\r\nshareIntent.setType(\"image/*\");\r\nstartActivity(Intent.createChooser(shareIntent, \"Share images to..\"));\r\n//如果分享3张JPEG的图片，那么MIME类型仍然是image/jpeg。\r\n//如果是不同图片格式的话，应该是用image/*来匹配那些可以接收任何图片类型的activity。\r\n//如果需要分享多种不同类型的数据，可以使用*/*来表示MIME。\r\n```\r\n##二.接收其他程序分享的文件\r\n首先要更新manifest文件，告诉它可以接收哪些文件分享：\r\n```\r\n<activity android:name=\".ui.MyActivity\">\r\n    <intent-filter>\r\n        <action android:name=\"android.intent.action.SEND\" />\r\n        <category android:name=\"android.intent.category.DEFAULT\" />\r\n        <data android:mimeType=\"image/*\" />\r\n    </intent-filter>\r\n    <intent-filter>\r\n        <action android:name=\"android.intent.action.SEND\" />\r\n        <category android:name=\"android.intent.category.DEFAULT\" />\r\n        <data android:mimeType=\"text/plain\" />\r\n    </intent-filter>\r\n    <intent-filter>\r\n        <action android:name=\"android.intent.action.SEND_MULTIPLE\" />\r\n        <category android:name=\"android.intent.category.DEFAULT\" />\r\n        <data android:mimeType=\"image/*\" />\r\n    </intent-filter>\r\n</activity>\r\n```\r\n处理收到的数据：\r\n```\r\nIntent intent = getIntent();\r\nString action = intent.getAction();\r\nString type = intent.getType();\r\n\r\nif (Intent.ACTION_SEND.equals(action) && type != null) {\r\n    if (\"text/plain\".equals(type)) {\r\n        handleSendText(intent); // Handle text being sent\r\n    } else if (type.startsWith(\"image/\")) {\r\n        handleSendImage(intent); // Handle single image being sent\r\n    }\r\n} else if (Intent.ACTION_SEND_MULTIPLE.equals(action) && type != null) {\r\n    if (type.startsWith(\"image/\")) {\r\n        handleSendMultipleImages(intent); // Handle multiple images being sent\r\n    }\r\n} else {\r\n    // Handle other intents, such as being started from the home screen\r\n}\r\n```\r\n对于文本，可以用\r\nString sharedText = intent.getStringExtra(Intent.EXTRA_TEXT);\r\n获取文本的值；\r\n对于图片或其他二进制文件，可以用\r\nUri imageUri = (Uri) intent.getParcelableExtra(Intent.EXTRA_STREAM);\r\n获取Uri，然后对其操作。比如操作图片，要添加到ImageView中：\r\n```\r\n//通过下面的方法可以从一个FileProvider提供的Uri中获取到文件\r\nParcelFileDescriptor mInputPFD = getContentResolver().openFileDescriptor(imageUri, \"r\");\r\nFileDescriptor fd = mInputPFD.getFileDescriptor();\r\nimageView.setImageBitmap(BitmapFactory.decodeStream(new FileInputStream(fd)));\r\n```\r\n##三.发送和响应文件请求\r\n###1.发送文件请求\r\n```\r\nIntent mRequestFileIntent = new Intent(Intent.ACTION_PICK);\r\nmRequestFileIntent.setType(\"image/jpg\");\r\nstartActivityForResult(mRequestFileIntent, 0);\r\n```\r\n下面是处理返回的文件分享\r\n```\r\n@Override\r\npublic void onActivityResult(int requestCode, int resultCode,\r\n                             Intent returnIntent) {\r\n    if (resultCode != RESULT_OK) {\r\n        return;\r\n    } else {\r\n        Uri returnUri = returnIntent.getData();\r\n\r\n        //获取文件相关信息\r\n        //获取文件的MIME类型\r\n        String mimeType = getContentResolver().getType(returnUri);\r\n        //获取文件名及文件大小\r\n        Cursor returnCursor = getContentResolver().query(returnUri, null, null, null, null);\r\n        int nameIndex = returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);\r\n        int sizeIndex = returnCursor.getColumnIndex(OpenableColumns.SIZE);\r\n        returnCursor.moveToFirst();\r\n        String name=returnCursor.getString(nameIndex);\r\n        String size=returnCursor.getString(sizeIndex);\r\n\r\n        try {\r\n            //把拿到的图片放到ImageView中\r\n            ParcelFileDescriptor mInputPFD = getContentResolver().openFileDescriptor(returnUri, \"r\");\r\n            FileDescriptor fd = mInputPFD.getFileDescriptor();\r\n            imageView.setImageBitmap(BitmapFactory.decodeStream(new FileInputStream(fd)));\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n            Log.e(\"MainActivity\", \"File not found.\");\r\n            return;\r\n        }\r\n    }\r\n}\r\n```\r\n###2.响应文件请求\r\n1.创建一个选择文件的Activity\r\n\r\n```\r\n<activity android:name=\".MainActivity\">\r\n    <intent-filter>\r\n        <action\r\n            android:name=\"android.intent.action.PICK\"/>\r\n        <category\r\n            android:name=\"android.intent.category.DEFAULT\"/>\r\n        <category\r\n            android:name=\"android.intent.category.OPENABLE\"/>\r\n        <data android:mimeType=\"text/plain\"/>\r\n        <data android:mimeType=\"image/*\"/>\r\n    </intent-filter>\r\n</activity>\r\n```\r\n2.设置provider\r\n```\r\n<provider\r\n    android:name=\"android.support.v4.content.FileProvider\"\r\n    android:authorities=\"youPackageName.fileprovider\"\r\n    android:grantUriPermissions=\"true\"\r\n    android:exported=\"false\">\r\n    <meta-data\r\n        android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n        android:resource=\"@xml/filepaths\" />\r\n</provider>\r\n```\r\n3.选择和发送文件分享\r\n```\r\nIntent inetnt=getIntent();\r\nString name=getCallingPackage();\r\nif(getCallingPackage()!=null){//判断是否是其他应用发出请求而打开的Activity\r\n    File requestFile = mImageFiles[position];//此处是从GridView中选取的图片，可以用自己的选择文件方式\r\n    Uri imageUri = getUriForFile(MainActivity.this,\"com.brokepal.fileresponse.fileprovider\",requestFile);\r\n    if (imageUri != null) {\r\n        mResultIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);//为文件授权\r\n        mResultIntent.setDataAndType(imageUri, getContentResolver().getType(imageUri));\r\n        MainActivity.this.setResult(Activity.RESULT_OK, mResultIntent);\r\n        finish();\r\n    } else {\r\n        mResultIntent.setDataAndType(null, \"\");\r\n        MainActivity.this.setResult(RESULT_CANCELED, mResultIntent);\r\n    }\r\n}\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}